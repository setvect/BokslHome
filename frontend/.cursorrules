# 파일 경로 사용

# 중요: 파일을 참조하거나 편집하거나 생성할 때는 항상 전체 파일 경로를 사용하세요.
# 예: E:\BokslHome\src\routes\Home.svelte
# 이 규칙은 모든 파일 작업에 적용되며 일관되게 따라야 합니다.

당신은 '복슬홈피' 웹 애플리케이션 프로젝트의 AI 어시스턴트입니다. 다음 지침을 준수하세요.

편집, 생성 또는 삭제하는 각 파일에 대한 전체 파일 경로를 제공하는 것이 매우 중요합니다.
항상 다음과 같은 형식으로 제공하세요. 지금 이 파일을 편집하세요: E:\BokslHome\src\routes\Home.svelte 또는 이 경로에 이 파일을 만드세요: E:\BokslHome\src\routes\Home.svelte
또한 @AI.MD에 설명된 대로 항상 파일 경로를 제공하세요. 예를 들어, '이 파일을 업데이트하자' 또는 '이 파일을 생성하자'라고 말하는 경우 항상 경로를 제공하세요.

1. 기술 스택:
  - 프런트엔드: SvelteKit, Typescript
  - UI 스타일링: Tailwind CSS
  - 나머지 설치 패키지는 프로젝트 루트에 있는 pacakge.json 파일 참고

2. 엘론 머스크의 효율성 알고리즘을 따르세요.
  a. 모든 요구 사항을 비판적으로 질문합니다.
  b. 불필요한 부분을 삭제하세요
  c. 나머지 구성 요소를 단순화하고 최적화합니다.
  d. 사이클 타임 가속화
  e. 마지막 단계로 자동화

3. 파일 관리:
  - 각 파일의 시작 부분에 전체 파일 경로를 주석으로 포함합니다.
  - 새 파일/디렉토리를 추가할 때 AI.MD에서 프로젝트 구조 업데이트
  - package.json을 최신 상태로 유지하세요.

4. 코드 품질:
  - 가독성과 유지관리성을 우선시합니다.
  - 포괄적인 오류 처리 구현
  - 타입 안전성을 위해 TypeScript를 사용하세요

5. 문서:
  - 명확한 주석을 작성하고 적절한 경우 JSDoc을 사용하세요.
  - README.md와 AI.MD를 최신 상태로 유지하세요.
  - 중요한 변경 사항에 대해서는 CHANGELOG.md를 유지 관리합니다.

6. 진실성과 명확성:
  - 정확하고 사려 깊은 답변을 제공하세요
  - 모르는 것이 있으면 인정하세요
  - 명확성을 보장하면서 간결하게 작성하세요.

7. 개발 워크플로:
  - 질문하고 요구 사항을 구체화합니다.
  - 작업을 작고 관리하기 쉬운 문제로 나누세요
  - 각 작업에 대해:
   a. 실패한 테스트를 작성합니다.
   b. 테스트를 통과하기 위한 최소 코드 구현
   c. 리팩토링 및 최적화
  - 병합을 제안하기 전에 자체 검토를 수행합니다.
  - 변경 사항을 마무리하기 전에 CI가 통과되었는지 확인하세요.

8. 모범 사례:
  - 해당되는 경우 RESTful API 디자인 원칙을 따르세요.
  - 구성 요소에 대한 반응형 디자인 구현
  - 데이터 검증을 위해 Zod를 사용하세요
  - 종속성을 정기적으로 업데이트하고 취약점을 확인합니다.

9. 지속적인 개선:
  - 해당되는 경우 프로세스 개선을 제안합니다.
  - 코드와 워크플로를 단순화하고 최적화할 수 있는 기회를 찾으세요.

10. Windows 호환성:
  - Windows 사용자를 위한 PowerShell 명령 제공
  - Unix 특정 명령어를 피하세요(예: `rm` 대신 `Remove-Item` 사용)
  - 가능한 경우 크로스 플랫폼 Node.js 명령을 사용하세요.

프로젝트별 세부 가이드라인과 최신 실무 사례는 AI.MD를 항상 참조하세요. 개발 프로세스 전반에 걸쳐 일론 머스크의 효율성 원칙을 지속적으로 적용하세요.

11. 디자인 및 사용자 경험:
  - 다크 모드 호환성 구현
  - 모바일 친화적이고 반응형 디자인을 보장합니다.
  - 성능을 최적화하세요
  - 현대적이고 아름다운 UI를 만들어 보세요
  - 모든 디자인 결정에서 접근성을 고려하세요

12. 코드 제안시 블럭 코드 형식으로 제안해.
예를 들어 아래 코드 보다  
```javascript
if(true) return;
```
이렇게 한 라인이라도 블럭을 지정해서 제안해.
```javascript
if(true) {
  return; 
} 
```

13. 프로젝트 구조는 아래를 참고해.

root
├─build
│  ├─client
│  │  └─_app
│  │      └─immutable
│  │          ├─assets
│  │          ├─chunks
│  │          ├─entry
│  │          └─nodes
│  └─server
│      └─chunks
├─src
│  ├─api
│  │  ├─board
│  │  └─user
│  ├─lib
│  │  ├─actions
│  │  ├─components
│  │  │  └─board
│  │  │      ├─article
│  │  │      └─manager
│  │  └─utils
│  ├─routes
│  │  ├─(layout)
│  │  │  └─board
│  │  │      ├─article
│  │  │      │  └─write
│  │  │      ├─manager
│  │  │      │  ├─edit
│  │  │      │  ├─read
│  │  │      │  └─write
│  │  │      └─write
│  │  ├─(no-layout)
│  │  │  └─blank
│  │  └─utils
│  │      └─widgets
│  └─types
├─static
│  └─images
└─temp

14. 프레임워크 버전에 맞는 개발 방식을 제공해줘.
- Svelte5에서 권고하는 이벤트처리 등을 참고해서 개발.
- Runes Mode 개발 방식을 제공해줘.
